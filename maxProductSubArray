

@input :--int nums[] = { -1, 0, -2, -3, 5, 6, -8, -4 };
@output -----5760 

public class MaxProductSubArray {

	public static void main(String[] args) {
		int nums[] = { -1, 0, -2, -3, 5, 6, -8, -4 };

		System.out.println(maxProduct(nums));

	}

	public static int maxProduct(int[] nums) {

		if (nums.length < 2)
			return nums[0];

		int max_end_here = 1;
		int min_end_here = 1;
		int maxProduct = nums[0];
		int tempStart = 0 ;
		int start = 0 ;
		int end  = 0 ;
		
		for (int i = 0; i < nums.length; i++) {

			if (nums[i] > 0) {
				if (max_end_here != 0)
					max_end_here = max_end_here * nums[i];
				else
					max_end_here = nums[i];

				if (min_end_here != 0)
					min_end_here = Math.min(min_end_here * nums[i], 0);
				else
					min_end_here = Math.min(nums[i], 0);

			} else if (nums[i] == 0) {
				max_end_here = 0;
				min_end_here = 0;
				tempStart = i+1;
			} else {
				// if nums[i] < 0
				int temp = max_end_here;
				if (min_end_here != 0) {
					max_end_here = Math.max(min_end_here * nums[i], 0);
				} else
					max_end_here = Math.max(nums[i], 0);

				if (temp != 0)
					min_end_here = temp * nums[i];
				else
					min_end_here = nums[i];
			}

			if (maxProduct < max_end_here) {
				maxProduct = max_end_here;
				end  = i;
				start = tempStart;
			}

		}
		System.out.println("start : "+start + "   " + " end  :: "+end);
		return maxProduct;
	
	}
	
	
	/**
//kadane extension simpler solution 
**/

static int getMaximumProductSubarray(int[] arr)
	{
	int currentPositive = arr[0];
	int currentNegative = arr[0];
	int overallPositive = arr[0];
	int overallNegative = arr[0];
	for(int i = 1; i < arr.length; i++)
	{
	int temp = currentPositive;
	currentPositive = Math.max(arr[i], Math.max(currentPositive * arr[i], currentNegative * arr[i]));
	currentNegative = Math.min(arr[i], Math.min(temp * arr[i], currentNegative * arr[i]));
	overallPositive = Math.max(overallPositive, currentPositive);
	overallNegative = Math.min(overallNegative, currentNegative);
	}
	return overallPositive;
	}
	
}
